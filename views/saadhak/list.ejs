<%- include('../partials/header') %>
<%- include('../partials/navbar') %>

<section class="container mt-4">
  <!-- Header Row -->
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="fw-bold text-primary">👥 All Saadhaks</h4>
    <a href="/saadhak/add" class="btn btn-sm btn-success">➕ Add Saadhak</a>
  </div>

  <!-- Filters and Search -->
  <div class="row gy-3 mb-3">
    <div class="col-md-3">
      <label class="form-label">Zila</label>
      <select id="zilaFilter" class="form-select">
        <option value="">Select Zila</option>
        <% zilas.forEach(z => { %>
          <option value="<%= z._id %>"><%= z.name %></option>
        <% }) %>
      </select>
    </div>
    <div class="col-md-3">
      <label class="form-label">Ksheter</label>
      <select id="ksheterFilter" class="form-select">
        <option value="">Select Ksheter</option>
      </select>
    </div>
    <div class="col-md-3">
      <label class="form-label">Kender</label>
      <select id="kenderFilter" class="form-select">
        <option value="">Select Kender</option>
      </select>
    </div>
    <div class="col-md-3">
      <label class="form-label">Search (Any field)</label>
      <div class="input-group">
        <input type="text" id="searchInput" class="form-control" placeholder="Name, Mobile, Role, etc.">
        <button id="searchBtn" class="btn btn-outline-primary">🔍 Search</button>
      </div>
    </div>
  </div>

  <!-- Actions -->
  <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2">
    <button id="resetBtn" class="btn btn-sm btn-outline-secondary">🔄 Reset</button>
    <button id="exportCsvBtn" class="btn btn-sm btn-outline-success">📥 Export to CSV</button>
  </div>

  <!-- Data Table -->
  <div class="table-responsive">
    <table class="table table-bordered table-striped align-middle">
      <thead class="table-dark">
        <tr>
          <th style="white-space: nowrap; width: 1%;">#</th>
          <th>Details</th>
         
        </tr>
      </thead>
      <tbody id="saadhakTableBody"></tbody>
    </table>
  </div>
</section>

<!-- Script -->
<script>
  const allSaadhaks = <%- JSON.stringify(saadhaks) %>;
  const allKsheters = <%- JSON.stringify(ksheters) %>;
  const allKenders = <%- JSON.stringify(kenders) %>;
  const user = <%- JSON.stringify(user) %>;
  let currentFilteredSaadhaks = [];
  let currentPage = 1;
  const pageSize = 50;

  document.addEventListener("DOMContentLoaded", function () {
    const zilaFilter = document.getElementById("zilaFilter");
    const ksheterFilter = document.getElementById("ksheterFilter");
    const kenderFilter = document.getElementById("kenderFilter");
    const resetBtn = document.getElementById("resetBtn");
    const tableBody = document.getElementById("saadhakTableBody");
    const searchBtn = document.getElementById("searchBtn");

    function populateKsheter(zilaId) {
      ksheterFilter.innerHTML = '<option value="">All Ksheter</option>';
      const filtered = allKsheters.filter(k => k.zila === zilaId);
      filtered.forEach(k => {
        ksheterFilter.innerHTML += `<option value="${k._id}">${k.name}</option>`;
      });
    }

    function populateKender(ksheterId) {
      kenderFilter.innerHTML = '<option value="">All Kender</option>';
      const filtered = allKenders.filter(k => k.ksheter === ksheterId);
      filtered.forEach(k => {
        kenderFilter.innerHTML += `<option value="${k._id}">${k.name}</option>`;
      });
    }

    // Role-based filters
    if (user.zila) {
      zilaFilter.value = user.zila;
      zilaFilter.disabled = true;
      populateKsheter(user.zila);
    }

    if (user.ksheter) {
      ksheterFilter.value = user.ksheter;
      ksheterFilter.disabled = true;
      populateKender(user.ksheter);
    }

    if (user.kender) {
      kenderFilter.value = user.kender;
      kenderFilter.disabled = true;
    }

    function renderTable() {
      const selectedZila = zilaFilter.value;
      const selectedKsheter = ksheterFilter.value;
      const selectedKender = kenderFilter.value;
      const searchTerm = searchInput.value.trim().toLowerCase();

      const filtered = allSaadhaks.filter(s => {
        const matchZila = !selectedZila || (s.zila && s.zila._id === selectedZila);
        const matchKsheter = !selectedKsheter || (s.ksheter && s.ksheter._id === selectedKsheter);
        const matchKender = !selectedKender || (s.kender && s.kender._id === selectedKender);
        const inSearch =
          s.name?.toLowerCase().includes(searchTerm) ||
          s.mobile?.includes(searchTerm) ||
          (Array.isArray(s.role) && s.role.join(',').toLowerCase().includes(searchTerm)) ||
          s.zila?.name?.toLowerCase().includes(searchTerm) ||
          s.ksheter?.name?.toLowerCase().includes(searchTerm) ||
          s.kender?.name?.toLowerCase().includes(searchTerm);
        return matchZila && matchKsheter && matchKender && inSearch;
      });

      currentFilteredSaadhaks = filtered;
      const totalPages = Math.ceil(filtered.length / pageSize);
      if (currentPage > totalPages) currentPage = 1;

      const start = (currentPage - 1) * pageSize;
      const paginated = filtered.slice(start, start + pageSize);
      tableBody.innerHTML = "";

      if (paginated.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="8" class="text-center text-muted">No matching records found.</td></tr>';
        document.getElementById("pagination")?.remove();
        return;
      }

      paginated.forEach((s, index) => {
        // Determine badge color logic based on first role (if any)
        const primaryRole = Array.isArray(s.role) ? s.role[0] : null;

        const badgeColor = primaryRole?.includes('Admin') ? 'dark' :
          primaryRole?.includes('Zila') ? 'danger' :
          primaryRole?.includes('Ksheter') ? 'primary' :
          primaryRole?.includes('Kender') ? 'success' :
          primaryRole?.includes('Shikshak') ? 'info' :
          primaryRole?.includes('Karyakarta') ? 'warning' : 'secondary';

        // Render roles
        const rolesHtml = Array.isArray(s.role) && s.role.length > 0
          ? s.role.map(r => `<span class="badge bg-${badgeColor} me-1 mb-1">${r}</span>`).join('')
          : '<span class="text-muted">—</span>';

       tableBody.innerHTML += `
        <tr style="border: 2px solid black">
          <td style="border: 2px solid black" class="fw-bold">${start + index + 1}</td>
          <td class="position-relative">
            <div class="position-absolute top-0 end-0 mt-1 me-1 d-flex gap-1">
              <a href="/saadhak/edit/${s._id}" class="btn btn-sm btn-outline-primary btn-sm py-0 px-1" title="Edit">🖊️</a>
              <button class="btn btn-sm btn-outline-danger btn-sm py-0 px-1" data-bs-toggle="modal" data-bs-target="#deleteModal${s._id}" title="Delete">🗑️</button>
            </div>

           <div class="fw-bold text-primary d-flex align-items-center flex-wrap">
            <a href="/saadhak/edit/${s._id}" class="text-decoration-none text-success me-2">${s.name}</a>
            <span class="d-flex flex-wrap gap-1 me-2">${rolesHtml}</span>
           
            </div>
               <span class="text-danger fw-bold">${s.mobile || '—'}</span>
            <div>
            
              </div>

            <div class="text-dark small">
              <span class="text-primary fw-bold">${s.kender?.name || '—'}</span>
            </div>
            <div class="text-dark small">
              <span class="fw-bold" style="color: orange;">${s.ksheter?.name || '—'}</span>
            </div>
            <div class="text-dark small">       
              <span class="text-dark fw-bold">${s.zila?.name || '—'}</span>
            </div>


            <div class="modal fade" id="deleteModal${s._id}" tabindex="-1">
              <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                  <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button class="btn-close" data-bs-dismiss="modal"></button>
                  </div>
                  <div class="modal-body">Delete <strong>${s.name}</strong>?</div>
                  <div class="modal-footer">
                    <button class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                    <a href="/saadhak/delete/${s._id}" class="btn btn-danger btn-sm">Yes, Delete</a>
                  </div>
                </div>
              </div>
            </div>
          </td>
        </tr>
      `;


      
      });

      renderPagination(filtered.length);
    }


    function renderPagination(totalItems) {
  const totalPages = Math.ceil(totalItems / pageSize);
  document.getElementById("pagination")?.remove();
  if (totalPages <= 1) return;

  const wrapper = document.createElement("div");
  wrapper.id = "pagination";
  wrapper.className = "d-flex justify-content-between align-items-center mt-3 flex-wrap gap-2";

  // Left side: scrollable pagination buttons
  const buttonGroup = document.createElement("div");
  buttonGroup.className = "d-flex overflow-auto gap-1 flex-nowrap";

  const createBtn = (label, page, disabled = false, active = false) => {
    const btn = document.createElement("button");
    btn.textContent = label;
    btn.className = `btn btn-sm ${active ? 'btn-primary' : 'btn-outline-primary'}`;
    if (disabled) btn.disabled = true;
    btn.addEventListener("click", () => {
      currentPage = page;
      renderTable();
    });
    return btn;
  };

  buttonGroup.appendChild(createBtn("⏮️ Prev", currentPage - 1, currentPage === 1));
  for (let i = 1; i <= totalPages; i++) {
    if (i === 1 || i === totalPages || Math.abs(i - currentPage) <= 2) {
      buttonGroup.appendChild(createBtn(i, i, false, i === currentPage));
    } else if (
      (i === currentPage - 3 && currentPage > 4) ||
      (i === currentPage + 3 && currentPage < totalPages - 3)
    ) {
      const ellipsis = document.createElement("span");
      ellipsis.textContent = "...";
      ellipsis.className = "px-2 text-muted";
      buttonGroup.appendChild(ellipsis);
    }
  }
  buttonGroup.appendChild(createBtn("Next ⏭️", currentPage + 1, currentPage === totalPages));

  wrapper.appendChild(buttonGroup);

  // Right side: Go To Page input
  const gotoWrapper = document.createElement("div");
  gotoWrapper.className = "d-flex align-items-center gap-1";

  const label = document.createElement("label");
  label.textContent = "Go to page:";
  label.className = "small mb-0";

  const input = document.createElement("input");
  input.type = "number";
  input.min = 1;
  input.max = totalPages;
  input.className = "form-control form-control-sm";
  input.style.width = "70px";

  const goBtn = document.createElement("button");
  goBtn.textContent = "Go";
  goBtn.className = "btn btn-sm btn-outline-secondary";

  goBtn.addEventListener("click", () => {
    const page = parseInt(input.value);
    if (!isNaN(page) && page >= 1 && page <= totalPages) {
      currentPage = page;
      renderTable();
    }
  });

  gotoWrapper.appendChild(label);
  gotoWrapper.appendChild(input);
  gotoWrapper.appendChild(goBtn);

  wrapper.appendChild(gotoWrapper);

  tableBody.parentElement.parentElement.appendChild(wrapper);

}



    document.getElementById("exportCsvBtn").addEventListener("click", () => {
      const filtered = currentFilteredSaadhaks;
      if (filtered.length === 0) {
        alert("No matching records to export.");
        return;
      }

      const headers = ["S.No", "Name", "Mobile", "Zila", "Ksheter", "Kender", "Roles"];
      const rows = filtered.map((s, index) => [
        index + 1,
        s.name || '',
        s.mobile || '',
        s.zila?.name || '',
        s.ksheter?.name || '',
        s.kender?.name || '',
        Array.isArray(s.role) ? s.role.join(', ') : ''
      ]);

      const csvContent = "data:text/csv;charset=utf-8," +
        [headers, ...rows].map(e => e.map(v => `"${v}"`).join(",")).join("\n");

      const link = document.createElement("a");
      link.setAttribute("href", encodeURI(csvContent));
      link.setAttribute("download", "saadhaks_filtered.csv");
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      const spinner = document.getElementById('loadingSpinner');
      
      setTimeout(() => {
        if (spinner) spinner.style.display = 'none';
      }, 2000);
    });

    zilaFilter.addEventListener("change", function () {
      populateKsheter(this.value);
      kenderFilter.innerHTML = '<option value="">All Kender</option>';
    });

    ksheterFilter.addEventListener("change", function () {
      populateKender(this.value);
    });

    searchBtn?.addEventListener("click", () => {
      currentPage = 1;
      renderTable();
    });

    resetBtn?.addEventListener("click", () => {
      currentPage = 1;
      searchInput.value = "";

      if (user.roles.includes("Admin")) {
        zilaFilter.value = "";
        ksheterFilter.innerHTML = '<option value="">Select Ksheter</option>';
        kenderFilter.innerHTML = '<option value="">Select Kender</option>';
      } else {
        zilaFilter.value = user.zila || "";
        populateKsheter(user.zila);
        ksheterFilter.value = user.ksheter || "";
        populateKender(user.ksheter);
        kenderFilter.value = user.kender || "";
      }

      tableBody.innerHTML = '';
      renderTable();
    });

    renderTable(); // initial render
  });
</script>

<%- include('../partials/footer') %> 