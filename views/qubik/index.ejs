<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Qubik Game</title>
  <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet" />
  <style>
    :root {
      --primary: #1e88e5;
      --secondary: #43a047;
      --bg: #fdfdfd;
      --box-empty: #e0e0e0;
      --box-filled: #90a4ae;
      --box-win: #ff4081;
    }

    body {
      margin: 0;
      font-family: 'Press Start 2P', sans-serif;
      background: linear-gradient(135deg, #f9fbe7, #e3f2fd);
      overflow-x: hidden;
    }

    #resetBtn, #exitBtn {
      position: fixed;
      padding: 10px 14px;
      font-size: 12px;
      border-radius: 8px;
      border: none;
      background: var(--primary);
      color: white;
      font-family: 'Press Start 2P', sans-serif;
      cursor: pointer;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
      transition: background 0.3s ease;
      z-index: 999;
    }

    #resetBtn:hover,
    #exitBtn:hover {
      background: #1565c0;
    }

    #resetBtn {
      bottom: 20px;
      right: 20px;
    }

    #exitBtn {
      top: 20px;
      right: 20px;
    }

    .modal {
      display: flex;
      justify-content: center;
      align-items: center;
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.6);
      z-index: 1000;
    }

    .modal-content {
      background: white;
      padding: 20px;
      text-align: center;
      border-radius: 12px;
      width: 300px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    }

    .modal-content button,
    .modal-content select {
      display: block;
      width: 100%;
      margin: 10px 0;
      padding: 12px;
      font-family: 'Press Start 2P', sans-serif;
      font-size: 10px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }

    .modal-content button {
      background: var(--primary);
      color: white;
    }

    .modal-content select {
      border: 1px solid #ccc;
    }

    .modal-content label {
      font-size: 11px;
    }

    .thinking-overlay {
      display: none;
      position: fixed;
      inset: 0;
      background: rgba(0,0,0,0.6);
      z-index: 9999;
      justify-content: center;
      align-items: center;
      font-family: 'Press Start 2P', sans-serif;
      font-size: 14px;
      color: white;
    }

    .main-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 16px;
      padding: 40px 10px;
      max-width: 100vw;
      overflow-x: auto;
    }

    .main-box {
      display: grid;
      grid-template-columns: repeat(4, minmax(30px, 45px));
      grid-template-rows: repeat(4, minmax(30px, 45px));
      gap: 6px;
      background: #ffffff;
      padding: 12px;
      border: 2px solid #b0bec5;
      border-radius: 12px;
      box-shadow: 0 6px 12px rgba(0,0,0,0.1);
    }

    .box {
      width: 100%;
      aspect-ratio: 1/1;
      background-color: var(--box-empty);
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: clamp(10px, 4vw, 16px);
      font-weight: bold;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.2s ease;
    }

    .box.filled {
      background-color: var(--box-filled);
      cursor: not-allowed;
    }

    .box.win {
      background-color: var(--box-win);
      color: white;
      animation: pulse 1s infinite;
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.15); }
    }

    .winner-display {
      text-align: center;
      font-size: 18px;
      margin-top: 20px;
      color: #d32f2f;
      text-shadow: 1px 1px 1px #ccc;
    }

    @media (max-width: 600px) {
      .main-container {
        flex-direction: column;
        align-items: center;
        gap: 12px;
        padding: 20px 10px;
      }

      .modal-content {
        width: 90%;
      }

      #resetBtn, #exitBtn {
        font-size: 10px;
        padding: 8px 10px;
      }

      .winner-display {
        font-size: 15px;
      }
    }
  </style>
</head>
<body>
  <audio id="beepSound" src="https://www.soundjay.com/button/beep-07.wav" preload="auto"></audio>
  <div class="thinking-overlay" id="thinkingOverlay">üí° Computer Thinking...</div>

  <button id="exitBtn" onclick="window.location.href='/'">‚ùå Exit</button>
  <div id="winner" class="winner-display"></div>

  <main class="container">
    <div class="main-container">
      <% for (let box = 0; box < 4; box++) { %>
        <div class="main-box main-box-<%= box %>">
          <% for (let row = 0; row < 4; row++) { %>
            <% for (let col = 0; col < 4; col++) { %>
              <div class="box box-<%= box %> empty" id="box-<%= box %><%= row %><%= col %>"></div>
            <% } %>
          <% } %>
        </div>
      <% } %>
    </div>
  </main>

  <div class="modal" id="startModal">
    <div class="modal-content">
      <h2>Play Qubik</h2>
      <button onclick="startGame(false)">2 Player Mode</button>
      <button onclick="showLevelSelector()">Play vs Computer</button>
      <div id="levelSelector" style="display: none;">
        <label for="difficultyLevel">Select Difficulty:</label>
        <select id="difficultyLevel">
          <option value="1">Level 1 - Easy</option>
          <option value="2">Level 2 - Medium</option>
          <option value="3">Level 3 - Hard</option>
          <option value="4">Level 4 - Expert</option>
          <option value="5" selected>Level 5 - Impossible</option>
        </select>
        <button id="levelStartBtn" onclick="startGame(true)">Start Game</button>
      </div>
    </div>
  </div>

  <button id="resetBtn">üîÅ</button>

  <script>
  document.addEventListener("DOMContentLoaded", () => {
    let board = Array(4).fill().map(() => Array(4).fill().map(() => Array(4).fill(0)));
    let currentPlayer = "X";
    let isVsComputer = false;
    let gameOver = false;
    let level = 1;
    let computerThinking = false;

    const beepSound = document.getElementById("beepSound");
    const thinkingOverlay = document.getElementById("thinkingOverlay");
    const boxes = document.querySelectorAll(".box");
    const winnerDiv = document.getElementById("winner");
    const modal = document.getElementById("startModal");
    const levelSelect = document.getElementById("levelSelector");

    function playBeep() {
      beepSound.currentTime = 0;
      beepSound.play();
    }

    window.showLevelSelector = () => {
      isVsComputer = true;
      levelSelect.style.display = "block";
    };

    window.startGame = function (vsComputer = false) {
      isVsComputer = vsComputer;
      level = parseInt(document.getElementById("difficultyLevel")?.value || 1);
      modal.style.display = "none";
      resetGame();
    };

    function resetGame() {
      board = Array(4).fill().map(() => Array(4).fill().map(() => Array(4).fill(0)));
      boxes.forEach((box) => {
        box.innerHTML = "";
        box.classList.remove("filled", "win");
        box.classList.add("empty");
      });
      winnerDiv.innerHTML = "";
      currentPlayer = "X";
      gameOver = false;
      computerThinking = false;
      thinkingOverlay.style.display = "none";
    }

    boxes.forEach((box) => {
      box.addEventListener("click", () => {
        if (gameOver || box.innerHTML !== "" || computerThinking) return;
        const [i, j, k] = box.id.slice(-3).split("").map(Number);
        if (board[i][j][k] !== 0) return;
        makeMove(i, j, k, currentPlayer);
        if (checkWin(currentPlayer)) return;
        currentPlayer = currentPlayer === "X" ? "O" : "X";
        if (isVsComputer && currentPlayer === "O" && !gameOver) {
          setTimeout(computerMoveWithOverlay, 300);
        }
      });
    });

    function computerMoveWithOverlay() {
      computerThinking = true;
      thinkingOverlay.style.display = "flex";
      setTimeout(() => {
        playBeep();
        computerMove();
        thinkingOverlay.style.display = "none";
        computerThinking = false;
      }, 600);
    }

    function makeMove(i, j, k, player) {
      board[i][j][k] = player;
      const boxId = `box-${i}${j}${k}`;
      const el = document.getElementById(boxId);
      el.innerHTML = player;
      el.classList.remove("empty");
      el.classList.add("filled");
    }

    function checkWin(player) {
      const lines = generateLines();
      for (const line of lines) {
        if (line.every(([x, y, z]) => board[x][y][z] === player)) {
          line.forEach(([x, y, z]) => document.getElementById(`box-${x}${y}${z}`).classList.add("win"));
          winnerDiv.innerHTML = `üéâ Player ${player} Wins!`;
          gameOver = true;
          return true;
        }
      }
      return false;
    }

    function checkWinVirtual(player) {
      const lines = generateLines();
      return lines.some(line => line.every(([x, y, z]) => board[x][y][z] === player));
    }

    function boardFull() {
      return board.every(level => level.every(row => row.every(cell => cell !== 0)));
    }

    function allEmptyMoves() {
      const moves = [];
      for (let i = 0; i < 4; i++)
        for (let j = 0; j < 4; j++)
          for (let k = 0; k < 4; k++)
            if (board[i][j][k] === 0) moves.push([i, j, k]);
      return moves;
    }

    function makeVirtualMove([i, j, k], player) {
      board[i][j][k] = player;
    }

    function undoVirtualMove([i, j, k]) {
      board[i][j][k] = 0;
    }

    function minimax(depth, isMaximizing, alpha, beta, maxDepth) {
      if (checkWinVirtual("O")) return 100 - depth;
      if (checkWinVirtual("X")) return -100 + depth;
      if (boardFull() || depth >= maxDepth) return 0;

      if (isMaximizing) {
        let maxEval = -Infinity;
        for (let m of allEmptyMoves()) {
          makeVirtualMove(m, "O");
          let eval = minimax(depth + 1, false, alpha, beta, maxDepth);
          undoVirtualMove(m);
          maxEval = Math.max(maxEval, eval);
          alpha = Math.max(alpha, eval);
          if (beta <= alpha) break;
        }
        return maxEval;
      } else {
        let minEval = Infinity;
        for (let m of allEmptyMoves()) {
          makeVirtualMove(m, "X");
          let eval = minimax(depth + 1, true, alpha, beta, maxDepth);
          undoVirtualMove(m);
          minEval = Math.min(minEval, eval);
          beta = Math.min(beta, eval);
          if (beta <= alpha) break;
        }
        return minEval;
      }
    }

    function generateLines() {
      const lines = [];
      for (let i = 0; i < 4; i++) {
        for (let j = 0; j < 4; j++) {
          lines.push([[i, j, 0], [i, j, 1], [i, j, 2], [i, j, 3]]);
          lines.push([[i, 0, j], [i, 1, j], [i, 2, j], [i, 3, j]]);
          lines.push([[0, i, j], [1, i, j], [2, i, j], [3, i, j]]);
        }
        lines.push([[i, 0, 0], [i, 1, 1], [i, 2, 2], [i, 3, 3]]);
        lines.push([[i, 0, 3], [i, 1, 2], [i, 2, 1], [i, 3, 0]]);
        lines.push([[0, i, 0], [1, i, 1], [2, i, 2], [3, i, 3]]);
        lines.push([[0, i, 3], [1, i, 2], [2, i, 1], [3, i, 0]]);
        lines.push([[0, 0, i], [1, 1, i], [2, 2, i], [3, 3, i]]);
        lines.push([[0, 3, i], [1, 2, i], [2, 1, i], [3, 0, i]]);
      }
      lines.push([[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3]]);
      lines.push([[0, 0, 3], [1, 1, 2], [2, 2, 1], [3, 3, 0]]);
      lines.push([[0, 3, 0], [1, 2, 1], [2, 1, 2], [3, 0, 3]]);
      lines.push([[0, 3, 3], [1, 2, 2], [2, 1, 1], [3, 0, 0]]);
      return lines;
    }

    function computerMove() {
      const empty = allEmptyMoves();
      if (empty.length === 0) return;

      let move = null;

      if (level === 1) {
        move = empty[Math.floor(Math.random() * empty.length)];
      } else if (level === 2 || level === 3) {
        for (const [i, j, k] of empty) {
          board[i][j][k] = "O";
          if (checkWinVirtual("O")) {
            board[i][j][k] = 0;
            move = [i, j, k];
            break;
          }
          board[i][j][k] = 0;
          board[i][j][k] = "X";
          if (checkWinVirtual("X")) {
            board[i][j][k] = 0;
            move = [i, j, k];
            break;
          }
          board[i][j][k] = 0;
        }
        if (!move) move = empty[Math.floor(Math.random() * empty.length)];
      } else if (level === 4 || level === 5) {
        let bestScore = -Infinity;
        const maxDepth = level === 5 ? 5 : 3;
        for (const [i, j, k] of empty) {
          board[i][j][k] = "O";
          let score = minimax(0, false, -Infinity, Infinity, maxDepth);
          board[i][j][k] = 0;
          if (score > bestScore) {
            bestScore = score;
            move = [i, j, k];
          }
        }
      }

      if (move) {
        const [i, j, k] = move;
        makeMove(i, j, k, "O");
        if (checkWin("O")) return;
        currentPlayer = "X";
      }
    }

    document.getElementById("resetBtn").addEventListener("click", resetGame);
  });
</script>

 

</body>
</html>
